<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<classVariableDeclaration>
		<keyword> static </keyword>
		<identifier> boolean </identifier>
		<identifier> test </identifier>
		<symbol> ; </symbol>
	</classVariableDeclaration>
	<subroutineDeclaration>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<variableDeclaration>
				<keyword> var </keyword>
				<identifier> SquareGame </identifier>
				<identifier> game </identifier>
				<symbol> ; </symbol>
			</variableDeclaration>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> game </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> SquareGame </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> run </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDeclaration>
	<subroutineDeclaration>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> more </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<variableDeclaration>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> i </identifier>
				<symbol> , </symbol>
				<identifier> j </identifier>
				<symbol> ; </symbol>
			</variableDeclaration>
			<variableDeclaration>
				<keyword> var </keyword>
				<identifier> String </identifier>
				<identifier> s </identifier>
				<symbol> ; </symbol>
			</variableDeclaration>
			<variableDeclaration>
				<keyword> var </keyword>
				<identifier> Array </identifier>
				<identifier> a </identifier>
				<symbol> ; </symbol>
			</variableDeclaration>
			<statements>
				<ifStatement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> s </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<stringconst> string constant </stringconst>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> s </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> null </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<intconst> 1 </intconst>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<intconst> 2 </intconst>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> * </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> - </symbol>
											<term>
												<identifier> j </identifier>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> j </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> j </identifier>
								</term>
								<symbol> / </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> - </symbol>
											<term>
												<intconst> 2 </intconst>
											</term>
										</term>
									</expression>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
						<letStatement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> | </symbol>
								<term>
									<identifier> j </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</letStatement>
					</statements>
					<symbol> } </symbol>
				</ifStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDeclaration>
	<symbol> } </symbol>
</class>
