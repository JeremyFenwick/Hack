// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // First muxer
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=AorAlutOut);
    
    // The A register
    // Check to see if we are in mode C. If so, determine if we want to load A or not
    Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
    ARegister(in=AorAlutOut, load=loadA, out=aRegisterOut, out[0..14]=addressM);

    // Second muxer
    // Determine if we are in mode C. If so, extract the a value
    // This switches between the a register value or the input memory value
    Mux(a=false, b=instruction[12], sel=instruction[15], out=AorM);
    Mux16(a=aRegisterOut, b=inM, sel=AorM, out=AorMemory);

    // The D register
    // Determine if we are in mode C. If so, check to see if the D value is set to load
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=RegisterD);

    // Set the writeM value
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    // ALU
    ALU(x=RegisterD, 
    y=AorMemory, 
    zx=instruction[11], 
    nx=instruction[10], 
    zy=instruction[9], 
    ny=instruction[8], 
    f=instruction[7], 
    no=instruction[6], 
    out=outM, 
    out=aluOut, 
    zr=zrOut, 
    ng=ngOut);

    // Program counter
    // Check to see if we should jump to A
    /**
    * 8-way demultiplexor:
    * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000 // no jump > null
    *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001 // comp > 0 > jgt
    *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010 // comp = 0 > jeq
    *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011 // comp >= 0 > jge
    *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100 // comp < 0 > jlt
    *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101 // comp !- 0 > jne
    *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110 // comp <= 0 > jle
    *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111 // jump > jmp
    */

    // zr,      if (out == 0) equals 1, else 0
    // ng;      if (out < 0)  equals 1, else 0

    // Helpers
    // Not zero
    Not(in=zrOut, out=notZr);
    // Is positive
    Not(in=ngOut, out=notNg);

    DMux8Way(in=true, sel=instruction[0..2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    // Check greater than zero
    And(a=jgt, b=notZr, out=jgtStep);
    And(a=jgtStep, b=notNg, out=jgtResult);
    // Check equal to zero
    And(a=jeq, b=zrOut, out=jeqResult);
    // Check greater than or equal to zero
    And(a=jge, b=zrOut, out=jgeZr);
    And(a=jge, b=notNg, out=jgePos);
    Or(a=jgeZr, b=jgePos, out=jgeResult);
    // Check less than zero
    And(a=jlt, b=ngOut, out=jltResult);
    // Check not equal to zero
    And(a=jne, b=notZr, out=jneResult);
    // Check less than or equal to zero
    And(a=jle, b=zrOut, out=jleZr);
    And(a=jle, b=ngOut, out=jleNeg);
    Or(a=jleZr, b=jleNeg, out=jleResult);
    
    // If any of the results are 1 set jump to 1
    Or8Way(
    in[0]=false,
    in[1]=jgtResult,
    in[2]=jeqResult,
    in[3]=jgeResult,
    in[4]=jltResult,
    in[5]=jneResult,
    in[6]=jleResult,
    in[7]=jmp,
    out=jumpStep);

    // If we are in mode A, the result is zero
    And(a=jumpStep, b=instruction[15], out=jumpResult);
    // Configure the program counter
    PC(in=aRegisterOut, load=jumpResult, inc=true, reset=reset, out[0..14]=pc);

}