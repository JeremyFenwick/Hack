// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int index, multi;

        let n = 16;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;

        let index = 1;
        let multi = 1;

        while (index < n) {
            let multi = multi + multi;
            let powersOfTwo[index] = multi;
            let index = index + 1;
        }

        return;
    }

        /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int total, shiftedX, index;

        let total = 0;
        let shiftedX = x;
        let index = 0;

        while (index < n) {
            if (Math.bit_check(y, index)) {
                let total = total + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let index = index + 1;
        }

        return total;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int abs_x, abs_y, result;

        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);

        let result = Math.divide_core(abs_x, abs_y);

        if ((x < 0) = (y < 0)) {
            return result;
        }
        else {
            return -result;
        }
        
    }

    function int divide_core(int x, int y) {
        var int quotient;
        
        if (y > x) {
            return 0;
        }

        if (y < 0) {
            return 0;
        }

        let quotient = Math.divide_core(x, Math.multiply(2, y));

        if ((x - Math.multiply(quotient + quotient, y)) < y) {
            return Math.multiply(2, quotient);
        } else {
            return Math.multiply(2, quotient) + 1;
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, index, temp, tempSquared;
        
        let index = Math.divide(n, 2) - 1;

        while ( index > -1 ) {

            let temp = y + (Math.power(2, index));
            let tempSquared = Math.power(temp, 2);

            if (tempSquared > 0){
                if ((tempSquared < x) | (tempSquared = x) ) {
                    let y = y + (Math.power(2, index));
                }
            }

            let index = index - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b)
        {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        else {
            return a;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        else {
            return -x;
        }
    }

    function boolean bit_check(int number, int index) {
        var int indexNumber, result;

        let indexNumber = powersOfTwo[index];
        let result = indexNumber & number;

        return ~(result = 0);
    }

    function int power(int number, int raised_to) {
        var int result, index, stop;
        
        if (raised_to = 0) {
            return 1;
        }

        let result = number;
        let index = 0;
        let stop = raised_to - 1;

        while (index < stop) {
            let result = Math.multiply(number, result);
            let index = index + 1;
        }
        
        return result;
    }
}
