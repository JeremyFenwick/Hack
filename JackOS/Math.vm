function Math.init 2
push constant 16
pop static 0
push constant 16
call Array.new 1
pop static 1
push static 1
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
push constant 1
pop local 1
label Math.init-1
push local 0
push static 0
lt
not
if-goto Math.init-2
push local 1
push local 1
add
pop local 1
push static 1
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Math.init-1
label Math.init-2
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label Math.multiply-1
push local 2
push static 0
lt
not
if-goto Math.multiply-2
push argument 1
push local 2
call Math.bit_check 2
not
if-goto Math.multiply-3
push local 0
push local 1
add
pop local 0
goto Math.multiply-4
label Math.multiply-3
label Math.multiply-4
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply-1
label Math.multiply-2
push local 0
return
function Math.divide 3
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 0
push local 1
call Math.divide_core 2
pop local 2
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
not
if-goto Math.divide-1
push local 2
return
goto Math.divide-2
label Math.divide-1
push local 2
neg
return
label Math.divide-2
function Math.divide_core 1
push argument 1
push argument 0
gt
not
if-goto Math.divide_core-1
push constant 0
return
goto Math.divide_core-2
label Math.divide_core-1
label Math.divide_core-2
push argument 1
push constant 0
lt
not
if-goto Math.divide_core-3
push constant 0
return
goto Math.divide_core-4
label Math.divide_core-3
label Math.divide_core-4
push argument 0
push constant 2
push argument 1
call Math.multiply 2
call Math.divide_core 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math.divide_core-5
push constant 2
push local 0
call Math.multiply 2
return
goto Math.divide_core-6
label Math.divide_core-5
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label Math.divide_core-6
function Math.sqrt 4
push static 0
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label Math.sqrt-1
push local 1
push constant 1
neg
gt
not
if-goto Math.sqrt-2
push local 0
push constant 2
push local 1
call Math.power 2
add
pop local 2
push local 2
push constant 2
call Math.power 2
pop local 3
push local 3
push constant 0
gt
not
if-goto Math.sqrt-3
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
not
if-goto Math.sqrt-5
push local 0
push constant 2
push local 1
call Math.power 2
add
pop local 0
goto Math.sqrt-6
label Math.sqrt-5
label Math.sqrt-6
goto Math.sqrt-4
label Math.sqrt-3
label Math.sqrt-4
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt-1
label Math.sqrt-2
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max-1
push argument 0
return
goto Math.max-2
label Math.max-1
push argument 1
return
label Math.max-2
function Math.min 0
push argument 0
push argument 1
gt
not
if-goto Math.min-1
push argument 1
return
goto Math.min-2
label Math.min-1
push argument 0
return
label Math.min-2
function Math.abs 0
push argument 0
push constant 0
gt
not
if-goto Math.abs-1
push argument 0
return
goto Math.abs-2
label Math.abs-1
push argument 0
neg
return
label Math.abs-2
function Math.bit_check 2
push static 1
push argument 1
add
pop pointer 1
push that 0
pop local 0
push local 0
push argument 0
and
pop local 1
push local 1
push constant 0
eq
not
return
function Math.power 3
push argument 1
push constant 0
eq
not
if-goto Math.power-1
push constant 1
return
goto Math.power-2
label Math.power-1
label Math.power-2
push argument 0
pop local 0
push constant 0
pop local 1
push argument 1
push constant 1
sub
pop local 2
label Math.power-3
push local 1
push local 2
lt
not
if-goto Math.power-4
push argument 0
push local 0
call Math.multiply 2
pop local 0
push local 1
push constant 1
add
pop local 1
goto Math.power-3
label Math.power-4
push local 0
return
