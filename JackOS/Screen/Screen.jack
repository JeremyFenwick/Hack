// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool isBlack;
    static Array memoryMap;
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)


    /** Initializes the Screen. */
    function void init() {
        var int index, multi, n;

        let isBlack = true;
        let memoryMap = 16384;


        let n = 16;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;

        let index = 1;
        let multi = 1;

        while (index < n) {
            let multi = multi + multi;
            let powersOfTwo[index] = multi;
            let index = index + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int index, lengthOfDisplay;
        let lengthOfDisplay = 8192;
        let index = 0;

        while (index < lengthOfDisplay) {
            let memoryMap[index] = 0;
        }
        
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean black) {
        let isBlack = black;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, modResult, ofTwo;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        // a mod b = a - floor(a / b) * b
        let modResult = x - ((x / 16) * 16);
        let ofTwo = powersOfTwo[modResult];

        if (isBlack) {
            let value = value | ofTwo;
        } else {
            let value = value & (~ofTwo);
        }

        do Memory.poke(16384 + address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, x, y, sx, sy;

        // Handle the cases where we are going right to left
        if ((x1 > x2) & (y1 > y2)){
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }
        if ((x1 > x2) & (y1 < y2)) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // Handle vertical line case
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, x2, y2);
            return;
        }
        // Handle the horizontal line case
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, y1, x2, y2);
            return;
        }


        let x = x1;
        let dx = (x2 - x1);

        let y = y1;
        let dy = (y2 - y1);

        let a = 0;
        let b = 0;
        let diff = 0;
        let sx = 1;
        let sy = 1;

        if (dx < 0) {
            let sx = -1;
            let dx = -dx;
        }

        if (dy < 0) {
            let sy = -1;
            let dy = -dy;
        }

        while (((a < dx) & (b < dy)) | ((a = dx) & (b = dy))) {
            do Screen.drawPixel((x + a), (y + b));
            if (diff < 0) {
                let a = a + sx;
                let diff = diff + dy;
            } else
            {
                let b = b + sy;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawVerticalLine(int x1, int y1, int x2, int y2) {
        var int index;
        let index = y1;

        // Handle down to up case
        if (y1 > y2) {
            do Screen.drawVerticalLine(x2, y2, x1, y1);
            return;
        }

        while (index < y2) {
            do Screen.drawPixel(x1, index);
            let index = index + 1;
        }

        return;
    }

    function void drawHorizontalLine(int x1, int y1, int x2, int y2) {
        var int index;
        let index = x1;

        // Handle right to left case
        if (x1 > x2) {
            do Screen.drawHorizontalLine(x2, y2, x1, y1);
            return;
        }

        while (index < x2) {
            do Screen.drawPixel(index, y1);
            let index = index + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x1, y2);
        do Screen.drawLine(x2, y1, x2, y2);
        do Screen.drawLine(x1, y1, x2, y1);
        do Screen.drawLine(x1, y2, x2, y2);

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int radius, origin, calculatedX, calculatedOtherX, rSquared;
        
        if (r > 180) {
            let radius = 181;
        } else {
            let radius = r;
        }

        let origin = -radius;
        let rSquared = radius * radius;

        while (origin < (radius + 1)) {
            let calculatedX = x - (Math.sqrt(rSquared - (origin * origin))); 
            let calculatedOtherX = x + (Math.sqrt(rSquared - (origin * origin))); 
            // do Screen.drawLine(x - 20, (y + origin), x + 20, (y + origin));
            do Screen.drawLine(calculatedX, (y + origin), calculatedOtherX, (y + origin));

            let origin = origin + 1;
        }

        return;
    }
}
