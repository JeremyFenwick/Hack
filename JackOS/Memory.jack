// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram;
    static array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int candidateNode, destination, previousSize;

        let candidateNode = freeList;        
        while (true) {
            // If a candidate was found
            if (heap[candidateNode + 1] > (size + 4)) {
                let destination = heap[candidateNode];
                let previousSize = heap[candidateNode + 1];

                // Populate the deliverable node
                let heap[candidateNode] = -1;
                let heap[candidateNode + 1] = size;

                let heap[candidateNode + (size + 2)] = destination;
                let heap[candidateNode + (size + 3)] = previousSize - (size - 2);

                let freeList = candidateNode + (2 + size);

                return candidateNode + 2;
            }
            if (heap[candidateNode] = 0) {
                return -1;
            }
            else {
                let candidateNode = heap[candidateNode];
            }
        } 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array returnNode) {
        var int previousStartingNode;

        let previousStartingNode = freeList;
        let heap[returnNode - 2] = previousStartingNode;
        let freeList = returnNode - 2;
        return;
    }    
}
